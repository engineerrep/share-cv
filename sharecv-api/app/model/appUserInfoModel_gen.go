// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appUserInfoFieldNames          = builder.RawFieldNames(&AppUserInfo{})
	appUserInfoRows                = strings.Join(appUserInfoFieldNames, ",")
	appUserInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(appUserInfoFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appUserInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(appUserInfoFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAppUserInfoUserIdPrefix = "cache:appUserInfo:userId:"
)

type (
	appUserInfoModel interface {
		Insert(ctx context.Context, data *AppUserInfo) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*AppUserInfo, error)
		Update(ctx context.Context, data *AppUserInfo) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultAppUserInfoModel struct {
		sqlc.CachedConn
		table string
	}

	AppUserInfo struct {
		UserId           int64        `db:"user_id"`           // 用户id
		FirstName        string       `db:"first_name"`        // 姓
		LastName         string       `db:"last_name"`         // 名
		Nickname         string       `db:"nickname"`          // 昵称
		Avatar           string       `db:"avatar"`            // 头像
		BackgroundImg    string       `db:"background_img"`    // 背景图片
		Gender           int64        `db:"gender"`            // 1=女 2=男 3=保密
		ModeType         int64        `db:"mode_type"`         // 是否公开 1=公开 2=隐藏
		Height           int64        `db:"height"`            // 身高
		Weight           int64        `db:"weight"`            // 体重
		Birthday         string       `db:"birthday"`          // 生日
		CountryId        int64        `db:"country_id"`        // 国家表id
		CountryName      string       `db:"country_name"`      // 国家名称
		Identity         int64        `db:"identity"`          // 用户身份 1=求职者 2=学生 3=招聘方
		Province         string       `db:"province"`          // 省份
		City             string       `db:"city"`              // 城市
		Address          string       `db:"address"`           // 详细地点
		PersonalStrength string       `db:"personal_strength"` // 个人实力
		PurposeCity      string       `db:"purpose_city"`      // 意向城市 多个用英语逗号分割
		Interests        string       `db:"interests"`         // 兴趣爱好 多个用英语逗号分割
		Languages        string       `db:"languages"`         // 会的语言 多个用英语逗号分割
		DatingTargets    string       `db:"dating_targets"`    // 交友的目 多个用英语逗号分割
		PersonalSkills   string       `db:"personal_skills"`   // 个人技能 多个用英语逗号分割
		CreateAt         time.Time    `db:"create_at"`         // 创建时间
		UpdateAt         time.Time    `db:"update_at"`         // 更新时间
		DeletedAt        sql.NullTime `db:"deleted_at"`        // 删除时间
	}
)

func newAppUserInfoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAppUserInfoModel {
	return &defaultAppUserInfoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`app_user_info`",
	}
}

func (m *defaultAppUserInfoModel) Delete(ctx context.Context, userId int64) error {
	appUserInfoUserIdKey := fmt.Sprintf("%s%v", cacheAppUserInfoUserIdPrefix, userId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, userId)
	}, appUserInfoUserIdKey)
	return err
}

func (m *defaultAppUserInfoModel) FindOne(ctx context.Context, userId int64) (*AppUserInfo, error) {
	appUserInfoUserIdKey := fmt.Sprintf("%s%v", cacheAppUserInfoUserIdPrefix, userId)
	var resp AppUserInfo
	err := m.QueryRowCtx(ctx, &resp, appUserInfoUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", appUserInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserInfoModel) Insert(ctx context.Context, data *AppUserInfo) (sql.Result, error) {
	appUserInfoUserIdKey := fmt.Sprintf("%s%v", cacheAppUserInfoUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, appUserInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.FirstName, data.LastName, data.Nickname, data.Avatar, data.BackgroundImg, data.Gender, data.ModeType, data.Height, data.Weight, data.Birthday, data.CountryId, data.CountryName, data.Identity, data.Province, data.City, data.Address, data.PersonalStrength, data.PurposeCity, data.Interests, data.Languages, data.DatingTargets, data.PersonalSkills, data.DeletedAt)
	}, appUserInfoUserIdKey)
	return ret, err
}

func (m *defaultAppUserInfoModel) Update(ctx context.Context, data *AppUserInfo) error {
	appUserInfoUserIdKey := fmt.Sprintf("%s%v", cacheAppUserInfoUserIdPrefix, data.UserId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, appUserInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FirstName, data.LastName, data.Nickname, data.Avatar, data.BackgroundImg, data.Gender, data.ModeType, data.Height, data.Weight, data.Birthday, data.CountryId, data.CountryName, data.Identity, data.Province, data.City, data.Address, data.PersonalStrength, data.PurposeCity, data.Interests, data.Languages, data.DatingTargets, data.PersonalSkills, data.DeletedAt, data.UserId)
	}, appUserInfoUserIdKey)
	return err
}

func (m *defaultAppUserInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAppUserInfoUserIdPrefix, primary)
}

func (m *defaultAppUserInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", appUserInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppUserInfoModel) tableName() string {
	return m.table
}
