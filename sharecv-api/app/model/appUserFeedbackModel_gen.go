// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appUserFeedbackFieldNames          = builder.RawFieldNames(&AppUserFeedback{})
	appUserFeedbackRows                = strings.Join(appUserFeedbackFieldNames, ",")
	appUserFeedbackRowsExpectAutoSet   = strings.Join(stringx.Remove(appUserFeedbackFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appUserFeedbackRowsWithPlaceHolder = strings.Join(stringx.Remove(appUserFeedbackFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAppUserFeedbackIdPrefix = "cache:appUserFeedback:id:"
)

type (
	appUserFeedbackModel interface {
		Insert(ctx context.Context, data *AppUserFeedback) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppUserFeedback, error)
		Update(ctx context.Context, data *AppUserFeedback) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppUserFeedbackModel struct {
		sqlc.CachedConn
		table string
	}

	AppUserFeedback struct {
		Id        int64        `db:"id"`         // 编号
		UserId    int64        `db:"user_id"`    // 用户id
		Type      string       `db:"type"`       // 意见反馈类型
		Content   string       `db:"content"`    // 意见反馈内容
		FileUrls  string       `db:"file_urls"`  // 图片地址 多张用逗号分割
		CreateAt  time.Time    `db:"create_at"`  // 创建时间
		UpdateAt  time.Time    `db:"update_at"`  // 更新时间
		DeletedAt sql.NullTime `db:"deleted_at"` // 删除时间
	}
)

func newAppUserFeedbackModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAppUserFeedbackModel {
	return &defaultAppUserFeedbackModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`app_user_feedback`",
	}
}

func (m *defaultAppUserFeedbackModel) Delete(ctx context.Context, id int64) error {
	appUserFeedbackIdKey := fmt.Sprintf("%s%v", cacheAppUserFeedbackIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, appUserFeedbackIdKey)
	return err
}

func (m *defaultAppUserFeedbackModel) FindOne(ctx context.Context, id int64) (*AppUserFeedback, error) {
	appUserFeedbackIdKey := fmt.Sprintf("%s%v", cacheAppUserFeedbackIdPrefix, id)
	var resp AppUserFeedback
	err := m.QueryRowCtx(ctx, &resp, appUserFeedbackIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserFeedbackRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserFeedbackModel) Insert(ctx context.Context, data *AppUserFeedback) (sql.Result, error) {
	appUserFeedbackIdKey := fmt.Sprintf("%s%v", cacheAppUserFeedbackIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, appUserFeedbackRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Type, data.Content, data.FileUrls, data.DeletedAt)
	}, appUserFeedbackIdKey)
	return ret, err
}

func (m *defaultAppUserFeedbackModel) Update(ctx context.Context, data *AppUserFeedback) error {
	appUserFeedbackIdKey := fmt.Sprintf("%s%v", cacheAppUserFeedbackIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appUserFeedbackRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Type, data.Content, data.FileUrls, data.DeletedAt, data.Id)
	}, appUserFeedbackIdKey)
	return err
}

func (m *defaultAppUserFeedbackModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAppUserFeedbackIdPrefix, primary)
}

func (m *defaultAppUserFeedbackModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserFeedbackRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppUserFeedbackModel) tableName() string {
	return m.table
}
