// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appUserPhotoFieldNames          = builder.RawFieldNames(&AppUserPhoto{})
	appUserPhotoRows                = strings.Join(appUserPhotoFieldNames, ",")
	appUserPhotoRowsExpectAutoSet   = strings.Join(stringx.Remove(appUserPhotoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appUserPhotoRowsWithPlaceHolder = strings.Join(stringx.Remove(appUserPhotoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAppUserPhotoIdPrefix = "cache:appUserPhoto:id:"
)

type (
	appUserPhotoModel interface {
		Insert(ctx context.Context, data *AppUserPhoto) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppUserPhoto, error)
		Update(ctx context.Context, data *AppUserPhoto) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppUserPhotoModel struct {
		sqlc.CachedConn
		table string
	}

	AppUserPhoto struct {
		Id        int64        `db:"id"`
		UserId    int64        `db:"user_id"`    // 用户id
		Title     string       `db:"title"`      // 图片标题
		FileUrl   string       `db:"file_url"`   // 图片URL
		OrderBy   int64        `db:"order_by"`   // 排序从小到大
		CreateAt  time.Time    `db:"create_at"`  // 创建时间
		UpdateAt  time.Time    `db:"update_at"`  // 更新时间
		DeletedAt sql.NullTime `db:"deleted_at"` // 删除时间
	}
)

func newAppUserPhotoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAppUserPhotoModel {
	return &defaultAppUserPhotoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`app_user_photo`",
	}
}

func (m *defaultAppUserPhotoModel) Delete(ctx context.Context, id int64) error {
	appUserPhotoIdKey := fmt.Sprintf("%s%v", cacheAppUserPhotoIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, appUserPhotoIdKey)
	return err
}

func (m *defaultAppUserPhotoModel) FindOne(ctx context.Context, id int64) (*AppUserPhoto, error) {
	appUserPhotoIdKey := fmt.Sprintf("%s%v", cacheAppUserPhotoIdPrefix, id)
	var resp AppUserPhoto
	err := m.QueryRowCtx(ctx, &resp, appUserPhotoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserPhotoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserPhotoModel) Insert(ctx context.Context, data *AppUserPhoto) (sql.Result, error) {
	appUserPhotoIdKey := fmt.Sprintf("%s%v", cacheAppUserPhotoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, appUserPhotoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Title, data.FileUrl, data.OrderBy, data.DeletedAt)
	}, appUserPhotoIdKey)
	return ret, err
}

func (m *defaultAppUserPhotoModel) Update(ctx context.Context, data *AppUserPhoto) error {
	appUserPhotoIdKey := fmt.Sprintf("%s%v", cacheAppUserPhotoIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appUserPhotoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Title, data.FileUrl, data.OrderBy, data.DeletedAt, data.Id)
	}, appUserPhotoIdKey)
	return err
}

func (m *defaultAppUserPhotoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAppUserPhotoIdPrefix, primary)
}

func (m *defaultAppUserPhotoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserPhotoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppUserPhotoModel) tableName() string {
	return m.table
}
