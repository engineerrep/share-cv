// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appUserViewsFieldNames          = builder.RawFieldNames(&AppUserViews{})
	appUserViewsRows                = strings.Join(appUserViewsFieldNames, ",")
	appUserViewsRowsExpectAutoSet   = strings.Join(stringx.Remove(appUserViewsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appUserViewsRowsWithPlaceHolder = strings.Join(stringx.Remove(appUserViewsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAppUserViewsIdPrefix = "cache:appUserViews:id:"
)

type (
	appUserViewsModel interface {
		Insert(ctx context.Context, data *AppUserViews) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppUserViews, error)
		Update(ctx context.Context, data *AppUserViews) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppUserViewsModel struct {
		sqlc.CachedConn
		table string
	}

	AppUserViews struct {
		Id         int64        `db:"id"`           // 编号
		UserId     int64        `db:"user_id"`      // 用户id
		ViewUserId int64        `db:"view_user_id"` // 被用户id
		CreateAt   time.Time    `db:"create_at"`    // 创建时间
		UpdateAt   time.Time    `db:"update_at"`    // 更新时间
		DeletedAt  sql.NullTime `db:"deleted_at"`   // 删除时间
	}
)

func newAppUserViewsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAppUserViewsModel {
	return &defaultAppUserViewsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`app_user_views`",
	}
}

func (m *defaultAppUserViewsModel) Delete(ctx context.Context, id int64) error {
	appUserViewsIdKey := fmt.Sprintf("%s%v", cacheAppUserViewsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, appUserViewsIdKey)
	return err
}

func (m *defaultAppUserViewsModel) FindOne(ctx context.Context, id int64) (*AppUserViews, error) {
	appUserViewsIdKey := fmt.Sprintf("%s%v", cacheAppUserViewsIdPrefix, id)
	var resp AppUserViews
	err := m.QueryRowCtx(ctx, &resp, appUserViewsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserViewsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserViewsModel) Insert(ctx context.Context, data *AppUserViews) (sql.Result, error) {
	appUserViewsIdKey := fmt.Sprintf("%s%v", cacheAppUserViewsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, appUserViewsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ViewUserId, data.DeletedAt)
	}, appUserViewsIdKey)
	return ret, err
}

func (m *defaultAppUserViewsModel) Update(ctx context.Context, data *AppUserViews) error {
	appUserViewsIdKey := fmt.Sprintf("%s%v", cacheAppUserViewsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appUserViewsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.ViewUserId, data.DeletedAt, data.Id)
	}, appUserViewsIdKey)
	return err
}

func (m *defaultAppUserViewsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAppUserViewsIdPrefix, primary)
}

func (m *defaultAppUserViewsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserViewsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppUserViewsModel) tableName() string {
	return m.table
}
