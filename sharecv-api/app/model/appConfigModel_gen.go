// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appConfigFieldNames          = builder.RawFieldNames(&AppConfig{})
	appConfigRows                = strings.Join(appConfigFieldNames, ",")
	appConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(appConfigFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	appConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(appConfigFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"

	cacheAppConfigIdPrefix = "cache:appConfig:id:"
)

type (
	appConfigModel interface {
		Insert(ctx context.Context, data *AppConfig) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppConfig, error)
		Update(ctx context.Context, data *AppConfig) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppConfigModel struct {
		sqlc.CachedConn
		table string
	}

	AppConfig struct {
		Id        int64        `db:"id"`         // 编号
		ApiUrls   string       `db:"api_urls"`   // 接口跟地址
		WebUrls   string       `db:"web_urls"`   // web跟地址
		WssUrls   string       `db:"wss_urls"`   // wss跟地址
		CreateAt  time.Time    `db:"create_at"`  // 创建时间
		UpdateAt  time.Time    `db:"update_at"`  // 更新时间
		DeletedAt sql.NullTime `db:"deleted_at"` // 删除时间
	}
)

func newAppConfigModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAppConfigModel {
	return &defaultAppConfigModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`app_config`",
	}
}

func (m *defaultAppConfigModel) Delete(ctx context.Context, id int64) error {
	appConfigIdKey := fmt.Sprintf("%s%v", cacheAppConfigIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, appConfigIdKey)
	return err
}

func (m *defaultAppConfigModel) FindOne(ctx context.Context, id int64) (*AppConfig, error) {
	appConfigIdKey := fmt.Sprintf("%s%v", cacheAppConfigIdPrefix, id)
	var resp AppConfig
	err := m.QueryRowCtx(ctx, &resp, appConfigIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppConfigModel) Insert(ctx context.Context, data *AppConfig) (sql.Result, error) {
	appConfigIdKey := fmt.Sprintf("%s%v", cacheAppConfigIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, appConfigRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ApiUrls, data.WebUrls, data.WssUrls, data.DeletedAt)
	}, appConfigIdKey)
	return ret, err
}

func (m *defaultAppConfigModel) Update(ctx context.Context, data *AppConfig) error {
	appConfigIdKey := fmt.Sprintf("%s%v", cacheAppConfigIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appConfigRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ApiUrls, data.WebUrls, data.WssUrls, data.DeletedAt, data.Id)
	}, appConfigIdKey)
	return err
}

func (m *defaultAppConfigModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAppConfigIdPrefix, primary)
}

func (m *defaultAppConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppConfigModel) tableName() string {
	return m.table
}
