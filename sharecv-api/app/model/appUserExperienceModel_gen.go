// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appUserExperienceFieldNames          = builder.RawFieldNames(&AppUserExperience{})
	appUserExperienceRows                = strings.Join(appUserExperienceFieldNames, ",")
	appUserExperienceRowsExpectAutoSet   = strings.Join(stringx.Remove(appUserExperienceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appUserExperienceRowsWithPlaceHolder = strings.Join(stringx.Remove(appUserExperienceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAppUserExperienceIdPrefix = "cache:appUserExperience:id:"
)

type (
	appUserExperienceModel interface {
		Insert(ctx context.Context, data *AppUserExperience) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppUserExperience, error)
		Update(ctx context.Context, data *AppUserExperience) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppUserExperienceModel struct {
		sqlc.CachedConn
		table string
	}

	AppUserExperience struct {
		Id                     int64        `db:"id"`                      // 编号
		UserId                 int64        `db:"user_id"`                 // 用户id
		ExperienceOrganization string       `db:"experience_organization"` // 所在组织
		ExperiencePosition     string       `db:"experience_position"`     // 担任职位
		ExperienceTitle        string       `db:"experience_title"`        // 标题
		ExperienceSummary      string       `db:"experience_summary"`      // 摘要
		ExperienceContent      string       `db:"experience_content"`      // 内容
		StartTime              string       `db:"start_time"`              // 开始时间
		EndTime                string       `db:"end_time"`                // 结束时间
		OrderBy                int64        `db:"order_by"`                // 排序从小到大
		CreateAt               time.Time    `db:"create_at"`               // 创建时间
		UpdateAt               time.Time    `db:"update_at"`               // 更新时间
		DeletedAt              sql.NullTime `db:"deleted_at"`              // 删除时间
	}
)

func newAppUserExperienceModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAppUserExperienceModel {
	return &defaultAppUserExperienceModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`app_user_experience`",
	}
}

func (m *defaultAppUserExperienceModel) Delete(ctx context.Context, id int64) error {
	appUserExperienceIdKey := fmt.Sprintf("%s%v", cacheAppUserExperienceIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, appUserExperienceIdKey)
	return err
}

func (m *defaultAppUserExperienceModel) FindOne(ctx context.Context, id int64) (*AppUserExperience, error) {
	appUserExperienceIdKey := fmt.Sprintf("%s%v", cacheAppUserExperienceIdPrefix, id)
	var resp AppUserExperience
	err := m.QueryRowCtx(ctx, &resp, appUserExperienceIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserExperienceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserExperienceModel) Insert(ctx context.Context, data *AppUserExperience) (sql.Result, error) {
	appUserExperienceIdKey := fmt.Sprintf("%s%v", cacheAppUserExperienceIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, appUserExperienceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ExperienceOrganization, data.ExperiencePosition, data.ExperienceTitle, data.ExperienceSummary, data.ExperienceContent, data.StartTime, data.EndTime, data.OrderBy, data.DeletedAt)
	}, appUserExperienceIdKey)
	return ret, err
}

func (m *defaultAppUserExperienceModel) Update(ctx context.Context, data *AppUserExperience) error {
	appUserExperienceIdKey := fmt.Sprintf("%s%v", cacheAppUserExperienceIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appUserExperienceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.ExperienceOrganization, data.ExperiencePosition, data.ExperienceTitle, data.ExperienceSummary, data.ExperienceContent, data.StartTime, data.EndTime, data.OrderBy, data.DeletedAt, data.Id)
	}, appUserExperienceIdKey)
	return err
}

func (m *defaultAppUserExperienceModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAppUserExperienceIdPrefix, primary)
}

func (m *defaultAppUserExperienceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserExperienceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppUserExperienceModel) tableName() string {
	return m.table
}
