// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appLanguageFieldNames          = builder.RawFieldNames(&AppLanguage{})
	appLanguageRows                = strings.Join(appLanguageFieldNames, ",")
	appLanguageRowsExpectAutoSet   = strings.Join(stringx.Remove(appLanguageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appLanguageRowsWithPlaceHolder = strings.Join(stringx.Remove(appLanguageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAppLanguageIdPrefix       = "cache:appLanguage:id:"
	cacheAppLanguageFullCodePrefix = "cache:appLanguage:fullCode:"
)

type (
	appLanguageModel interface {
		Insert(ctx context.Context, data *AppLanguage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppLanguage, error)
		FindOneByFullCode(ctx context.Context, fullCode string) (*AppLanguage, error)
		Update(ctx context.Context, data *AppLanguage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppLanguageModel struct {
		sqlc.CachedConn
		table string
	}

	AppLanguage struct {
		Id          int64        `db:"id"`           // 编号
		CountryCode string       `db:"country_code"` // 国家图标
		FullCode    string       `db:"full_code"`    // 代码全称
		Code        string       `db:"code"`         // 代码简称
		Name        string       `db:"name"`         // 语言
		NameEn      string       `db:"name_en"`      // 语言英文
		NameCn      string       `db:"name_cn"`      // 语言中文
		Currency    string       `db:"currency"`     // 币种
		CreateAt    time.Time    `db:"create_at"`    // 创建时间
		UpdateAt    time.Time    `db:"update_at"`    // 更新时间
		DeletedAt   sql.NullTime `db:"deleted_at"`   // 删除时间
	}
)

func newAppLanguageModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAppLanguageModel {
	return &defaultAppLanguageModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`app_language`",
	}
}

func (m *defaultAppLanguageModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	appLanguageFullCodeKey := fmt.Sprintf("%s%v", cacheAppLanguageFullCodePrefix, data.FullCode)
	appLanguageIdKey := fmt.Sprintf("%s%v", cacheAppLanguageIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, appLanguageFullCodeKey, appLanguageIdKey)
	return err
}

func (m *defaultAppLanguageModel) FindOne(ctx context.Context, id int64) (*AppLanguage, error) {
	appLanguageIdKey := fmt.Sprintf("%s%v", cacheAppLanguageIdPrefix, id)
	var resp AppLanguage
	err := m.QueryRowCtx(ctx, &resp, appLanguageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appLanguageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppLanguageModel) FindOneByFullCode(ctx context.Context, fullCode string) (*AppLanguage, error) {
	appLanguageFullCodeKey := fmt.Sprintf("%s%v", cacheAppLanguageFullCodePrefix, fullCode)
	var resp AppLanguage
	err := m.QueryRowIndexCtx(ctx, &resp, appLanguageFullCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `full_code` = ? limit 1", appLanguageRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, fullCode); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppLanguageModel) Insert(ctx context.Context, data *AppLanguage) (sql.Result, error) {
	appLanguageFullCodeKey := fmt.Sprintf("%s%v", cacheAppLanguageFullCodePrefix, data.FullCode)
	appLanguageIdKey := fmt.Sprintf("%s%v", cacheAppLanguageIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, appLanguageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CountryCode, data.FullCode, data.Code, data.Name, data.NameEn, data.NameCn, data.Currency, data.DeletedAt)
	}, appLanguageFullCodeKey, appLanguageIdKey)
	return ret, err
}

func (m *defaultAppLanguageModel) Update(ctx context.Context, newData *AppLanguage) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	appLanguageFullCodeKey := fmt.Sprintf("%s%v", cacheAppLanguageFullCodePrefix, data.FullCode)
	appLanguageIdKey := fmt.Sprintf("%s%v", cacheAppLanguageIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appLanguageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CountryCode, newData.FullCode, newData.Code, newData.Name, newData.NameEn, newData.NameCn, newData.Currency, newData.DeletedAt, newData.Id)
	}, appLanguageFullCodeKey, appLanguageIdKey)
	return err
}

func (m *defaultAppLanguageModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAppLanguageIdPrefix, primary)
}

func (m *defaultAppLanguageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appLanguageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppLanguageModel) tableName() string {
	return m.table
}
