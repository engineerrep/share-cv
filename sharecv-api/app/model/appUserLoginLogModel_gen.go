// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appUserLoginLogFieldNames          = builder.RawFieldNames(&AppUserLoginLog{})
	appUserLoginLogRows                = strings.Join(appUserLoginLogFieldNames, ",")
	appUserLoginLogRowsExpectAutoSet   = strings.Join(stringx.Remove(appUserLoginLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appUserLoginLogRowsWithPlaceHolder = strings.Join(stringx.Remove(appUserLoginLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAppUserLoginLogIdPrefix = "cache:appUserLoginLog:id:"
)

type (
	appUserLoginLogModel interface {
		Insert(ctx context.Context, data *AppUserLoginLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppUserLoginLog, error)
		Update(ctx context.Context, data *AppUserLoginLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppUserLoginLogModel struct {
		sqlc.CachedConn
		table string
	}

	AppUserLoginLog struct {
		Id            int64        `db:"id"`
		UserId        int64        `db:"user_id"`        // 用户id(app_user表id)
		Ip            string       `db:"ip"`             // ip
		DeviceId      string       `db:"device_id"`      // 设备唯一标识
		AppVersion    string       `db:"app_version"`    // app版本
		SystemVersion string       `db:"system_version"` // system版本
		Platform      int64        `db:"platform"`       // 登录平台 1 pc 2 win 3 iOS 4 android 5 iPad 6 mac
		CreateAt      time.Time    `db:"create_at"`      // 创建时间
		UpdateAt      time.Time    `db:"update_at"`      // 更新时间
		DeletedAt     sql.NullTime `db:"deleted_at"`     // 删除时间
	}
)

func newAppUserLoginLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAppUserLoginLogModel {
	return &defaultAppUserLoginLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`app_user_login_log`",
	}
}

func (m *defaultAppUserLoginLogModel) Delete(ctx context.Context, id int64) error {
	appUserLoginLogIdKey := fmt.Sprintf("%s%v", cacheAppUserLoginLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, appUserLoginLogIdKey)
	return err
}

func (m *defaultAppUserLoginLogModel) FindOne(ctx context.Context, id int64) (*AppUserLoginLog, error) {
	appUserLoginLogIdKey := fmt.Sprintf("%s%v", cacheAppUserLoginLogIdPrefix, id)
	var resp AppUserLoginLog
	err := m.QueryRowCtx(ctx, &resp, appUserLoginLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserLoginLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserLoginLogModel) Insert(ctx context.Context, data *AppUserLoginLog) (sql.Result, error) {
	appUserLoginLogIdKey := fmt.Sprintf("%s%v", cacheAppUserLoginLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, appUserLoginLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Ip, data.DeviceId, data.AppVersion, data.SystemVersion, data.Platform, data.DeletedAt)
	}, appUserLoginLogIdKey)
	return ret, err
}

func (m *defaultAppUserLoginLogModel) Update(ctx context.Context, data *AppUserLoginLog) error {
	appUserLoginLogIdKey := fmt.Sprintf("%s%v", cacheAppUserLoginLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appUserLoginLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Ip, data.DeviceId, data.AppVersion, data.SystemVersion, data.Platform, data.DeletedAt, data.Id)
	}, appUserLoginLogIdKey)
	return err
}

func (m *defaultAppUserLoginLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAppUserLoginLogIdPrefix, primary)
}

func (m *defaultAppUserLoginLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserLoginLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppUserLoginLogModel) tableName() string {
	return m.table
}
