// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appUserEducationFieldNames          = builder.RawFieldNames(&AppUserEducation{})
	appUserEducationRows                = strings.Join(appUserEducationFieldNames, ",")
	appUserEducationRowsExpectAutoSet   = strings.Join(stringx.Remove(appUserEducationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appUserEducationRowsWithPlaceHolder = strings.Join(stringx.Remove(appUserEducationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAppUserEducationIdPrefix = "cache:appUserEducation:id:"
)

type (
	appUserEducationModel interface {
		Insert(ctx context.Context, data *AppUserEducation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppUserEducation, error)
		Update(ctx context.Context, data *AppUserEducation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppUserEducationModel struct {
		sqlc.CachedConn
		table string
	}

	AppUserEducation struct {
		Id                  int64        `db:"id"`                   // 编号
		UserId              int64        `db:"user_id"`              // 用户id
		OrganizationName    string       `db:"organization_name"`    // 组织名称
		OrganizationCountry string       `db:"organization_country"` // 组织国家
		OrganizationCity    string       `db:"organization_city"`    // 组织城市
		OrganizationLevel   string       `db:"organization_level"`   // 组织级别
		StartTime           string       `db:"start_time"`           // 入学时间
		EndTime             string       `db:"end_time"`             // 毕业时间
		StudySpecialty      string       `db:"study_specialty"`      // 学习专业
		StudyAchievement    string       `db:"study_achievement"`    // 学习成就
		DegreeEducation     string       `db:"degree_education"`     // 教育学位
		OrderBy             int64        `db:"order_by"`             // 排序从小到大
		CreateAt            time.Time    `db:"create_at"`            // 创建时间
		UpdateAt            time.Time    `db:"update_at"`            // 更新时间
		DeletedAt           sql.NullTime `db:"deleted_at"`           // 删除时间
	}
)

func newAppUserEducationModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAppUserEducationModel {
	return &defaultAppUserEducationModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`app_user_education`",
	}
}

func (m *defaultAppUserEducationModel) Delete(ctx context.Context, id int64) error {
	appUserEducationIdKey := fmt.Sprintf("%s%v", cacheAppUserEducationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, appUserEducationIdKey)
	return err
}

func (m *defaultAppUserEducationModel) FindOne(ctx context.Context, id int64) (*AppUserEducation, error) {
	appUserEducationIdKey := fmt.Sprintf("%s%v", cacheAppUserEducationIdPrefix, id)
	var resp AppUserEducation
	err := m.QueryRowCtx(ctx, &resp, appUserEducationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserEducationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserEducationModel) Insert(ctx context.Context, data *AppUserEducation) (sql.Result, error) {
	appUserEducationIdKey := fmt.Sprintf("%s%v", cacheAppUserEducationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, appUserEducationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.OrganizationName, data.OrganizationCountry, data.OrganizationCity, data.OrganizationLevel, data.StartTime, data.EndTime, data.StudySpecialty, data.StudyAchievement, data.DegreeEducation, data.OrderBy, data.DeletedAt)
	}, appUserEducationIdKey)
	return ret, err
}

func (m *defaultAppUserEducationModel) Update(ctx context.Context, data *AppUserEducation) error {
	appUserEducationIdKey := fmt.Sprintf("%s%v", cacheAppUserEducationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appUserEducationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.OrganizationName, data.OrganizationCountry, data.OrganizationCity, data.OrganizationLevel, data.StartTime, data.EndTime, data.StudySpecialty, data.StudyAchievement, data.DegreeEducation, data.OrderBy, data.DeletedAt, data.Id)
	}, appUserEducationIdKey)
	return err
}

func (m *defaultAppUserEducationModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAppUserEducationIdPrefix, primary)
}

func (m *defaultAppUserEducationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserEducationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppUserEducationModel) tableName() string {
	return m.table
}
