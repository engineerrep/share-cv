// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appUserCompanyFieldNames          = builder.RawFieldNames(&AppUserCompany{})
	appUserCompanyRows                = strings.Join(appUserCompanyFieldNames, ",")
	appUserCompanyRowsExpectAutoSet   = strings.Join(stringx.Remove(appUserCompanyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appUserCompanyRowsWithPlaceHolder = strings.Join(stringx.Remove(appUserCompanyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAppUserCompanyIdPrefix = "cache:appUserCompany:id:"
)

type (
	appUserCompanyModel interface {
		Insert(ctx context.Context, data *AppUserCompany) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppUserCompany, error)
		Update(ctx context.Context, data *AppUserCompany) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppUserCompanyModel struct {
		sqlc.CachedConn
		table string
	}

	AppUserCompany struct {
		Id              int64        `db:"id"`               // 编号
		UserId          int64        `db:"user_id"`          // 用户id
		CompanyName     string       `db:"company_name"`     // 公司名称
		CompanyCountry  string       `db:"company_country"`  // 公司国家
		CompanyCity     string       `db:"company_city"`     // 公司城市
		CompanyIndustry string       `db:"company_industry"` // 公司行业
		StartTime       string       `db:"start_time"`       // 开始时间
		EndTime         string       `db:"end_time"`         // 结束时间
		JobPosition     string       `db:"job_position"`     // 工作职位
		JobContent      string       `db:"job_content"`      // 工作内容
		JobSummary      string       `db:"job_summary"`      // 工作总结
		JobSkills       string       `db:"job_skills"`       // 使用技能 多个用逗号分隔
		OrderBy         int64        `db:"order_by"`         // 排序从小到大
		CreateAt        time.Time    `db:"create_at"`        // 创建时间
		UpdateAt        time.Time    `db:"update_at"`        // 更新时间
		DeletedAt       sql.NullTime `db:"deleted_at"`       // 删除时间
	}
)

func newAppUserCompanyModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAppUserCompanyModel {
	return &defaultAppUserCompanyModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`app_user_company`",
	}
}

func (m *defaultAppUserCompanyModel) Delete(ctx context.Context, id int64) error {
	appUserCompanyIdKey := fmt.Sprintf("%s%v", cacheAppUserCompanyIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, appUserCompanyIdKey)
	return err
}

func (m *defaultAppUserCompanyModel) FindOne(ctx context.Context, id int64) (*AppUserCompany, error) {
	appUserCompanyIdKey := fmt.Sprintf("%s%v", cacheAppUserCompanyIdPrefix, id)
	var resp AppUserCompany
	err := m.QueryRowCtx(ctx, &resp, appUserCompanyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserCompanyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserCompanyModel) Insert(ctx context.Context, data *AppUserCompany) (sql.Result, error) {
	appUserCompanyIdKey := fmt.Sprintf("%s%v", cacheAppUserCompanyIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, appUserCompanyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.CompanyName, data.CompanyCountry, data.CompanyCity, data.CompanyIndustry, data.StartTime, data.EndTime, data.JobPosition, data.JobContent, data.JobSummary, data.JobSkills, data.OrderBy, data.DeletedAt)
	}, appUserCompanyIdKey)
	return ret, err
}

func (m *defaultAppUserCompanyModel) Update(ctx context.Context, data *AppUserCompany) error {
	appUserCompanyIdKey := fmt.Sprintf("%s%v", cacheAppUserCompanyIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appUserCompanyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.CompanyName, data.CompanyCountry, data.CompanyCity, data.CompanyIndustry, data.StartTime, data.EndTime, data.JobPosition, data.JobContent, data.JobSummary, data.JobSkills, data.OrderBy, data.DeletedAt, data.Id)
	}, appUserCompanyIdKey)
	return err
}

func (m *defaultAppUserCompanyModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAppUserCompanyIdPrefix, primary)
}

func (m *defaultAppUserCompanyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserCompanyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppUserCompanyModel) tableName() string {
	return m.table
}
