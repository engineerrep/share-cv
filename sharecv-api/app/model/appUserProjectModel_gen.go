// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appUserProjectFieldNames          = builder.RawFieldNames(&AppUserProject{})
	appUserProjectRows                = strings.Join(appUserProjectFieldNames, ",")
	appUserProjectRowsExpectAutoSet   = strings.Join(stringx.Remove(appUserProjectFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appUserProjectRowsWithPlaceHolder = strings.Join(stringx.Remove(appUserProjectFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAppUserProjectIdPrefix = "cache:appUserProject:id:"
)

type (
	appUserProjectModel interface {
		Insert(ctx context.Context, data *AppUserProject) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppUserProject, error)
		Update(ctx context.Context, data *AppUserProject) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppUserProjectModel struct {
		sqlc.CachedConn
		table string
	}

	AppUserProject struct {
		Id                  int64        `db:"id"`                    // 编号
		UserId              int64        `db:"user_id"`               // 用户id
		ProjectName         string       `db:"project_name"`          // 项目名称
		ProjectContent      string       `db:"project_content"`       // 项目内容
		JobPosition         string       `db:"job_position"`          // 工作职位
		JobContent          string       `db:"job_content"`           // 工作内容
		StartTime           string       `db:"start_time"`            // 启动时间
		EndTime             string       `db:"end_time"`              // 结束时间
		ProjectLinkPlatform string       `db:"project_link_platform"` // 项目链接平台
		ProjectLink         string       `db:"project_link"`          // 项目链接
		ProjectSkills       string       `db:"project_skills"`        // 使用技能 多个用逗号分隔
		OrderBy             int64        `db:"order_by"`              // 排序从小到大
		CreateAt            time.Time    `db:"create_at"`             // 创建时间
		UpdateAt            time.Time    `db:"update_at"`             // 更新时间
		DeletedAt           sql.NullTime `db:"deleted_at"`            // 删除时间
	}
)

func newAppUserProjectModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAppUserProjectModel {
	return &defaultAppUserProjectModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`app_user_project`",
	}
}

func (m *defaultAppUserProjectModel) Delete(ctx context.Context, id int64) error {
	appUserProjectIdKey := fmt.Sprintf("%s%v", cacheAppUserProjectIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, appUserProjectIdKey)
	return err
}

func (m *defaultAppUserProjectModel) FindOne(ctx context.Context, id int64) (*AppUserProject, error) {
	appUserProjectIdKey := fmt.Sprintf("%s%v", cacheAppUserProjectIdPrefix, id)
	var resp AppUserProject
	err := m.QueryRowCtx(ctx, &resp, appUserProjectIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserProjectRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserProjectModel) Insert(ctx context.Context, data *AppUserProject) (sql.Result, error) {
	appUserProjectIdKey := fmt.Sprintf("%s%v", cacheAppUserProjectIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, appUserProjectRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ProjectName, data.ProjectContent, data.JobPosition, data.JobContent, data.StartTime, data.EndTime, data.ProjectLinkPlatform, data.ProjectLink, data.ProjectSkills, data.OrderBy, data.DeletedAt)
	}, appUserProjectIdKey)
	return ret, err
}

func (m *defaultAppUserProjectModel) Update(ctx context.Context, data *AppUserProject) error {
	appUserProjectIdKey := fmt.Sprintf("%s%v", cacheAppUserProjectIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appUserProjectRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.ProjectName, data.ProjectContent, data.JobPosition, data.JobContent, data.StartTime, data.EndTime, data.ProjectLinkPlatform, data.ProjectLink, data.ProjectSkills, data.OrderBy, data.DeletedAt, data.Id)
	}, appUserProjectIdKey)
	return err
}

func (m *defaultAppUserProjectModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAppUserProjectIdPrefix, primary)
}

func (m *defaultAppUserProjectModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUserProjectRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppUserProjectModel) tableName() string {
	return m.table
}
