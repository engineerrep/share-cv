// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	account "sharecvapi/app/api/internal/handler/account"
	common "sharecvapi/app/api/internal/handler/common"
	config "sharecvapi/app/api/internal/handler/config"
	login "sharecvapi/app/api/internal/handler/login"
	oss "sharecvapi/app/api/internal/handler/oss"
	register "sharecvapi/app/api/internal/handler/register"
	userbase "sharecvapi/app/api/internal/handler/userbase"
	usercompany "sharecvapi/app/api/internal/handler/usercompany"
	usercustomattribute "sharecvapi/app/api/internal/handler/usercustomattribute"
	usereducation "sharecvapi/app/api/internal/handler/usereducation"
	userexperience "sharecvapi/app/api/internal/handler/userexperience"
	userphoto "sharecvapi/app/api/internal/handler/userphoto"
	userproject "sharecvapi/app/api/internal/handler/userproject"
	uservideo "sharecvapi/app/api/internal/handler/uservideo"
	uservolunteer "sharecvapi/app/api/internal/handler/uservolunteer"
	web "sharecvapi/app/api/internal/handler/web"
	"sharecvapi/app/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/auth/server",
					Handler: oss.OssAuthServerHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/oss"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upload",
					Handler: oss.OssUploadHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/oss"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/country",
					Handler: common.GetCountryListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/language",
					Handler: common.GetLanguageListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/common"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/info",
					Handler: config.GetConfigHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/config"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/email",
					Handler: register.RegisterEmailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/check/email",
					Handler: register.CheckEmailHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/register"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/send/email/code",
					Handler: account.SendEmailCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/send/phone/code",
					Handler: account.SendPhoneCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/check/email/code",
					Handler: account.CheckEmailCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/check/phone/code",
					Handler: account.CheckPhoneCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/forget/password",
					Handler: account.ForgetPasswordHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/account"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/change/password",
					Handler: account.ChangePasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/change/email/with/code",
					Handler: account.ChangeEmailWithCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/change/email/with/password",
					Handler: account.ChangeEmailWithPasswordHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/account"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/email/code",
					Handler: login.EmailCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email/password",
					Handler: login.EmailPasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/google",
					Handler: login.GoogleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/apple",
					Handler: login.AppleHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/login"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/logout",
					Handler: login.LogoutHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/login"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/email/code",
					Handler: web.EmailCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email/password",
					Handler: web.EmailPasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/google/login",
					Handler: web.GoogleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/google/auth/url",
					Handler: web.GoogleAuthUrlHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email/register",
					Handler: web.EmailRegisterHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/web"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/info",
					Handler: userbase.GetUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/other",
					Handler: userbase.GetOtherUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/phone",
					Handler: userbase.UpdateUserPhoneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/base",
					Handler: userbase.UpdateUserBaseHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/avatar",
					Handler: userbase.UpdateUserAvatarHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/background",
					Handler: userbase.UpdateUserBackgroundImgHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/name",
					Handler: userbase.UpdateUserNameHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/nickname",
					Handler: userbase.UpdateUserNickNameHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/birthday",
					Handler: userbase.UpdateUserBirthdayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/weight",
					Handler: userbase.UpdateUserWeightHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/gender",
					Handler: userbase.UpdateUserGenderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/mode",
					Handler: userbase.UpdateUserModeTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/country",
					Handler: userbase.UpdateUserCountryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/identity",
					Handler: userbase.UpdateUserIdentityHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/province",
					Handler: userbase.UpdateUserProvinceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/city",
					Handler: userbase.UpdateUserCityHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/address",
					Handler: userbase.UpdateUserAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/purpose/city",
					Handler: userbase.UpdateUserPurposeCityHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/interests",
					Handler: userbase.UpdateUserInterestsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/languages",
					Handler: userbase.UpdateUserLanguagesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/dating/targets",
					Handler: userbase.UpdateUserDatingTargetsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/personal/strength",
					Handler: userbase.UpdateUserPersonalStrengthHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/personal/skills",
					Handler: userbase.UpdateUserPersonalSkillsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update/location",
					Handler: userbase.UpdateUserLocationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/feedback",
					Handler: userbase.UserFeedBackHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/userbase"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/list",
					Handler: uservideo.ListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: uservideo.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: uservideo.DeleteHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/user/video"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/list",
					Handler: userphoto.ListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: userphoto.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: userphoto.DeleteHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/user/photo"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/list",
					Handler: usercompany.ListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: usercompany.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: usercompany.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upd/skills",
					Handler: usercompany.UpdJobSkillsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/get",
					Handler: usercompany.GetHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/user/company"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/list",
					Handler: userexperience.ListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: userexperience.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: userexperience.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/get",
					Handler: userexperience.GetHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/user/experience"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/list",
					Handler: uservolunteer.ListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: uservolunteer.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: uservolunteer.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/get",
					Handler: uservolunteer.GetHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/user/volunteer"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/list",
					Handler: userproject.ListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: userproject.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: userproject.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upd/skills",
					Handler: userproject.UpdProjectSkillsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/get",
					Handler: userproject.GetHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/user/project"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/list",
					Handler: usereducation.ListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: usereducation.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: usereducation.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/get",
					Handler: usereducation.GetHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/user/education"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PermAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/list",
					Handler: usercustomattribute.ListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: usercustomattribute.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: usercustomattribute.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/get",
					Handler: usercustomattribute.GetHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/user/custom/attribute"),
	)
}
